// PROOF OF THE NP-COMPLETE PROBLEMS (VERTEX-COVER-PROBLEM)


A deterministic algorithm is an algorithm that, for a given input, always produces the same output and follows the same sequence of steps every time it is run. The behavior of such an algorithm is predictable because it does not involve randomness or probabilistic decisions during its execution.

Key Characteristics of Deterministic Algorithms
Predictability: Given the same input, the algorithm always provides the same output.
No Randomness: The algorithm does not rely on any random choices or probabilistic steps.
Repeatability: The same sequence of operations will always occur for a given input.
Fixed Execution Path: The algorithm follows a fixed and defined sequence of steps.
Examples of Deterministic Algorithms
Sorting Algorithms:

Bubble Sort, Insertion Sort, and Merge Sort always produce the same sorted list for a given input.
Searching Algorithms:

Binary Search on a sorted list always takes the same path to find an element (or report it as not found).
Mathematical Computations:

Calculating the factorial of a number or the Fibonacci sequence using a fixed formula.
Graph Algorithms:

Dijkstra's Algorithm for shortest paths follows a deterministic process.

// NON-DETERMINISTICS 
A non-deterministic algorithm is an algorithm that, for a given input, can produce different outputs on different executions, even if the input remains the same.

Randomized QuickSort, NP-Complete Problems

DIFFERENCES IN SCREEN SHOTS


//

WHEN DO YOU CLAIM THAT ALGORITHM IS POLYNOMIAL TIME . EXPLAIN WITH EXAMPLE

Linear Time - 


Description: Time complexity grows directly proportional to the input size 
ùëõ
n.
Example: Finding the largest element in an array.
Quadratic Time - 


Description: Time complexity grows proportional to the square of the input size 
ùëõ
n.
Example: Bubble Sort (a basic sorting algorithm)
